name: Server module

on:
  push:
    branches: [ develop ]
    paths:
    - 'Server-Module/**'
  pull_request:
    branches: [ develop ]
    paths:
    - 'Server-Module/**'

env:
  DEPLOY: ${{ github.event_name == 'push' }}

  # CI environment variables
  SRCDIR: ./Server-Module/Server
  SOLFILE: ./Server-Module/Server.sln
  CSPROJ: ./Server-Module/Server/Server.csproj
  TESTPROJ: ./Server-Module/Server.Tests/Server.Tests.csproj
  TESTCOV: ./Server-Module/Server.Tests/cobertura.xml
  DBUSER: ${{ secrets.DBUSERNAME }}
  DBPWD: ${{ secrets.DBPASSWORD }}

  # CD environment variables
  ACR: powoeuwacr.azurecr.io
  NAMESPACE: n
  APPNAME: server
  APPSETTINGS: appsettings.Production.json
  DEPLOYFILE: deploy.yml
  DOCKERFILE: ./Server-Module/Server/Dockerfile
  
jobs:
  build:
    strategy:
      fail-fast: false
    name: Build and test
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup ASP.NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLFILE }}
    - name: Build module
      run: dotnet build --no-restore ${{ env.CSPROJ }}
    - name: Test module
      run: dotnet test --verbosity normal /p:IncludeTestAssembly=true /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput="cobertura.xml" ${{ env.TESTPROJ }}
    - name: Generate test report
      uses: danielpalme/ReportGenerator-GitHub-Action@4.8.7
      with:
        reports: ${{ env.TESTCOV }}
        targetdir: 'coverage'
        reporttypes: 'Html'
        sourcedirs: ${{ env.SRCDIR }}
        verbosity: 'Warning'
        title: Server module test coverage report
    - name: Upload test report to GitHub
      uses: actions/upload-artifact@v2
      with:
        name: Server module test report
        path: './coverage/*'
  deploy:
    needs: build
    name: Deploy server module to Kubernetes cluster
    runs-on: ubuntu-latest
    if: ${{ env.DEPLOY }}
    steps:
    - name: Set IMAGE_ID as env variable
      run: echo "IMAGE_ID=${{ env.ACR }}/${{ env.APPNAME }}:v${{ github.run_number }}" >> $GITHUB_ENV
    - name: Login to ACR
      uses: docker/login-action@v1
      with:
        registry: ${{ env.ACR }}
        username: ${{ secrets.ACR_USER_ID }}
        password: ${{ secrets.ACR_USER_PASSWORD }}
    - name: Substitute environment variables in appsettings file
      run: envsubst < "${{ env.SRCDIR }}/${{ env.APPSETTINGS }}" > "${{ env.SRCDIR }}/${{ env.APPSETTINGS }}"
    - name: Build Docker image
      run: docker build -f ${{ env.DOCKERFILE }} ${{ env.SRCDIR }} -t ${{ env.IMAGE_ID }}
    - name: Push Docker image to registry
      run: docker push ${{ env.IMAGE_ID }}
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Setup KubeCTL
      uses: azure/setup-kubectl@v1
      with:
        version: 'v1.18.8'
    - name: Setup Kubernetes context for Azure
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ secrets.AKS_NAME }}
        resource-group: ${{ secrets.AKS_RG_NAME }}
    - name: Set DOMAIN env variable
      run: echo "DOMAIN=$(az aks show -g ${{ secrets.AKS_RG_NAME }} -n ${{ secrets.AKS_NAME }} --query addonProfiles.httpApplicationRouting.config.HTTPApplicationRoutingZoneName -o tsv)" >> $GITHUB_ENV
    - name: Print DOMAIN and IMAGE_ID
      run: |
        echo "${{ env.DOMAIN }}"
        echo "${{ env.IMAGE_ID }}"
    - name: Substitute environment variables in app deployment file
      run: envsubst < "${{ env.SRCDIR }}/${{ env.DEPLOYFILE }}" > "${{ env.SRCDIR }}/out-${{ env.DEPLOYFILE }}"
    - name: Deploy app to Kubernetes cluster
      run: kubectl apply -f ${{ env.SRCDIR }}/out-${{ env.DEPLOYFILE }} --wait