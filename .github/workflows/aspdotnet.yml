name: ASP.NET CI

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    strategy:
      matrix:
        module: [ Server, Client, Hotel ]
    name: Build and test ${{ matrix.module }} module
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup ASP.NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - run: |
        export CSPROJ=./Server-Module/Server/Server.csproj
        export TESTCOV=./Server-Module/Server.Tests/cobertura.xml
        echo "::set-env name=CSPROJ::$CSPROJ"
        echo "::set-env name=TESTCOV::$TESTCOV"
      if: ${{ matrix.module }} == "Server"
    - run: |
        export CSPROJ=./Client-Module/Client-Module/Client-Module.csproj
        export TESTCOV=./Client-Module/Client-Module.Tests/cobertura.xml
        echo "::set-env name=CSPROJ::$CSPROJ"
        echo "::set-env name=TESTCOV::$TESTCOV"
      if: ${{ matrix.module }} == "Client"
    - run: |
        export CSPROJ=./Hotel-Module/Hotel/Hotel.csproj
        export TESTCOV=./Hotel-Module/Hotel.Tests/cobertura.xml
        echo "::set-env name=CSPROJ::$CSPROJ"
        echo "::set-env name=TESTCOV::$TESTCOV"
      if: ${{ matrix.module }} == "Hotel"
    - name: Restore dependencies
      run: dotnet restore ${{ env.CSPROJ }}
    - name: Build
      run: dotnet build --no-restore ${{ env.CSPROJ }}
    - name: Test
      run: dotnet test --no-build --verbosity normal /p:IncludeTestAssembly=true /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput="cobertura.xml" ${{ env.CSPROJ }}
    - name: Cobertura report upload to GitHub
      uses: 5monkeys/cobertura-action@v8
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        report_name: Test coverage report
        minimum_coverage: 90
        path: ${{ env.TESTCOV }}
