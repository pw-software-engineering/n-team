@using Client_Module.ViewsTagID.Client;
@{
    ViewData["Title"] = "Client account";
    AccountTagID tagIDs = new AccountTagID();
}

<div class="text-center">
    <h1 class="display-4">Your client account information</h1>
</div>
<hr class="mt-1 mb-3" />

<div class="w-100 shadow-border bg-light p-4" id="@tagIDs.LoadingDataDivID">
    <img class="d-block mx-auto" style="width: 75px" src="~/resources/loading.gif" />
    <p class="text-center h5 mt-2">Loading client information...</p>
</div>

<div class="w-100 shadow-border p-4 mt-4 bg-light d-none" id="@tagIDs.MainContentDivID">
    <div class="form-group row">
        <label for="client-name" class="col-sm-2 col-form-label">Name</label>
        <div class="col-sm-10">
            <input readonly type="text" class="form-control" id="@tagIDs.InputClientNameID">
        </div>
    </div>
    <div class="form-group row">
        <label for="client-surname" class="col-sm-2 col-form-label">Surname</label>
        <div class="col-sm-10">
            <input readonly type="text" class="form-control" id="@tagIDs.InputClientSurnameID">
        </div>
    </div>
    <hr class="mt-1 mb-3" />
    <p class="my-2 text-danger text-center d-none" id="@tagIDs.ServerErrorBoxID"></p>
    <p class="my-2 text-success text-center d-none" id="@tagIDs.ServerSuccessBoxID">Client information successfully changed!</p>
    <div class="form-group row">
        <div class="col-sm-2 mt-auto">
            <label for="client-username" class="col-form-label">Username</label>
        </div>
        <div class="col-sm-10">
            <small class="m-0 text-danger d-none" id="@tagIDs.ClientUsernameValidationBoxID"></small>
            <input type="text" class="form-control" id="@tagIDs.InputClientUsernameID">
        </div>
    </div>
    <div class="form-group row">
        <div class="col-sm-2 mt-auto">
            <label for="client-email" class="col-form-label">E-mail</label>
        </div>
        <div class="col-sm-10">
            <small class="m-0 text-danger d-none" id="@tagIDs.ClientEmailValidationBoxID"></small>
            <input type="email" class="form-control" id="@tagIDs.InputClientEmailID">
        </div>
    </div>
    <hr class="mt-1 " />
    <button class="btn btn-primary my-2" style="vertical-align: middle" id="@tagIDs.ApplyChangesBtnID">Apply changes</button>
    @*normal class: d-flex-inline (instead d-none)*@
    <div class="d-none flex-row align-items-center ml-3 text-center" style="vertical-align: middle" id="@tagIDs.UpdatingClientInfoDivID">
        <img class="d-" style="width: 50px; height: 50px" src="~/resources/loading.gif" />
        <span class="text-center h5 mt-2 ml-3">Updating client information...</span>
    </div>
</div>

@section Scripts{
<script src="~/js/Shared/serverApiManager.js"></script>
<script src="~/js/ClientAccount/clientAccountManager.js"></script>
<script src="~/js/Shared/inputValidator.js"></script>
<script>
    $(document).ready(function () {
        var apiConfig = {
            apiBaseUrl: "@ServerApiConfig.BaseUrl",
            apiTokenCookieName: "@ClientTokenCookieDefaults.AuthCookieName",
            apiTokenHeaderName: "@ServerApiConfig.TokenHeaderName"
        };

        var clientAccountManager = new ClientAccountManager(apiConfig);

        function FillClientInfo(data) {
            $("#@tagIDs.InputClientNameID").val(data.name);
            $("#@tagIDs.InputClientSurnameID").val(data.surname);
            $("#@tagIDs.InputClientUsernameID").val(data.username);
            $("#@tagIDs.InputClientEmailID").val(data.email);
        }

        clientAccountManager
            .getClientInfo()
            .then((data) => {
                FillClientInfo(data);
                $("#@tagIDs.LoadingDataDivID").addClass("d-none");
                $("#@tagIDs.MainContentDivID").removeClass("d-none");
            }).catch((error) => {
                var loadingDataDiv = $("#@tagIDs.LoadingDataDivID");
                loadingDataDiv.empty();
                loadingDataDiv.append(
                    $("<p>").attr("class", "text-center text-danger h3").text("Error"),
                    $("<p>").attr("class", "text-center text-danger h5").text(error.message)
                );
            });

        function ShowServerError(error) {
            var serverError = $("#@tagIDs.ServerErrorBoxID");
            serverError.removeClass("d-none");
            serverError.text(error);
        }

        function HideServerError() {
            var serverError = $("#@tagIDs.ServerErrorBoxID");
            serverError.addClass("d-none");
        }

        function ToggleServerSuccessMessage(isVisible) {
            var serverSuccessBox = $("#@tagIDs.ServerSuccessBoxID");
            if (isVisible) {
                serverSuccessBox.removeClass("d-none");
            } else {
                serverSuccessBox.addClass("d-none");
            }
        }

        var clientEmailValidator = new InputValidator({
            inputHandle: $("#@tagIDs.InputClientEmailID"),
            errorBoxHandle: $("#@tagIDs.ClientEmailValidationBoxID"),
            inputValidator: (inputValue) => {
                var emailRegexp = /^[a-zA-Z]([a-zA-Z0-9]|[\.\-_]){0,100}@@([a-zA-Z0-9]{1,40}\.)+[a-z]{1,40}$/;
                return emailRegexp.test(inputValue);
            },
            validationError: "Email format is incorrect"
        });

        var clientUsernameValidator = new InputValidator({
            inputHandle: $("#@tagIDs.InputClientUsernameID"),
            errorBoxHandle: $("#@tagIDs.ClientUsernameValidationBoxID"),
            inputValidator: (inputValue) => {
                var usernameRegexp = /^[a-zA-Z][a-zA-Z0-9]{5,60}$/;
                return usernameRegexp.test(inputValue);
            },
            validationError: "Username must consist of only alphanumeric symbols (at least 5 and at most 60)"
        });

        var isPendingUpdateRequest = false;
        $("#@tagIDs.ApplyChangesBtnID").click(function () {
            var areAllValid = true;
            clientEmailValidator.hideValidationError();
            clientUsernameValidator.hideValidationError();
            HideServerError();
            ToggleServerSuccessMessage(false);
            if (!clientEmailValidator.validate()) {
                areAllValid = false;
            }
            if (!clientUsernameValidator.validate()) {
                areAllValid = false;
            }
            console.log(areAllValid);
            if (!areAllValid) {
                return;
            }
            if (isPendingUpdateRequest) {
                ShowServerError("Another client profile update request is already pending");
                return;
            }
            isPendingUpdateRequest = true;
            $("#@tagIDs.UpdatingClientInfoDivID").removeClass("d-none");
            $("#@tagIDs.UpdatingClientInfoDivID").addClass("d-inline-block");

            clientAccountManager.updateClientInfo({
                username: clientUsernameValidator.val(),
                email: clientEmailValidator.val()
            }).then(() => {
                ToggleServerSuccessMessage(true);
                isPendingUpdateRequest = false;
                $("#@tagIDs.UpdatingClientInfoDivID").addClass("d-none");
                $("#@tagIDs.UpdatingClientInfoDivID").removeClass("d-inline-block");
            }).catch((error) => {
                ShowServerError(error);
                isPendingUpdateRequest = false;
                $("#@tagIDs.UpdatingClientInfoDivID").addClass("d-none");
                $("#@tagIDs.UpdatingClientInfoDivID").removeClass("d-inline-block");
            });
        });
    });
</script>
}
