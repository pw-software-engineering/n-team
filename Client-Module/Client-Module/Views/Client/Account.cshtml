@using Client_Module.ViewsTagID.Client;
@{
    ViewData["Title"] = "Client account";
}

<div class="text-center">
    <h1 class="display-4">Your client account information</h1>
</div>
<div class="w-100 shadow-border p-4 mt-4 bg-light">
    <div class="form-group row">
        <label for="client-name" class="col-sm-2 col-form-label">Name</label>
        <div class="col-sm-10">
            <input readonly type="text" class="form-control" id="@AccountTagID.InputClientNameID">
        </div>
    </div>
    <div class="form-group row">
        <label for="client-surname" class="col-sm-2 col-form-label">Surname</label>
        <div class="col-sm-10">
            <input readonly type="text" class="form-control" id="@AccountTagID.InputClientSurnameID">
        </div>
    </div>
    <hr class="mt-1 mb-3" />
    <p class="my-2 text-danger text-center" id="@AccountTagID.ServerErrorBoxID"></p>
    <div class="form-group row">
        <div class="col-sm-2 mt-auto">
            <label for="client-username" class="col-form-label">Username</label>
        </div>
        <div class="col-sm-10">
            <small class="m-0 text-danger d-none" id="@AccountTagID.ClientUsernameValidationBoxID"></small>
            <input type="text" class="form-control" id="@AccountTagID.InputClientUsernameID">
        </div>
    </div>
    <div class="form-group row">
        <div class="col-sm-2 mt-auto">
            <label for="client-email" class="col-form-label">E-mail</label>
        </div>
        <div class="col-sm-10">
            <small class="m-0 text-danger d-none" id="@AccountTagID.ClientEmailValidationBoxID"></small>
            <input type="email" class="form-control" id="@AccountTagID.InputClientEmailID">
        </div>
    </div>
    <hr class="mt-1 " />
    <button class="btn btn-primary" id="@AccountTagID.ApplyChangesBtnID">Apply changes</button>
</div>

@section Scripts{
    <script>
        $(document).ready(function () {
            GetClientInfo();

            var isPendingUpdateRequest = false;
            $("#@AccountTagID.ApplyChangesBtnID").click(function () {
                var areAllValid = true;
                HideClientEmailValidationError();
                HideClientUsernameValidationError();
                HideServerErrorBox();
                if (!IsClientEmailValid()) {
                    areAllValid = false;
                    ShowClientEmailValidationError("Email format is incorrect");
                }
                if (!IsClientUsernameValid()) {
                    areAllValid = false;
                    ShowClientUsernameValidationError("Username must consist of at least 5 and at most 30 alphanumeric symbols");
                }
                console.log(areAllValid);
                if (!areAllValid) {
                    return;
                }
                if (isPendingUpdateRequest) {
                    console.log("Another client profile update request is already pending");
                    return;
                }
                var usernameInput = $("#@AccountTagID.InputClientUsernameID");
                var emailInput = $("#@AccountTagID.InputClientEmailID");
                isPendingUpdateRequest = true;
                $.ajax({
                    method: "PATCH",
                    url: "@ServerApiConfig.BaseUrl/api/client",
                    headers: {
                        "@ServerApiConfig.TokenHeaderName": getCookie("@ClientTokenCookieDefaults.AuthCookieName")
                    },
                    contentType: "application/json",
                    data: JSON.stringify({
                        username: usernameInput.val(),
                        email: emailInput.val()
                    }),
                    success: (data, textStatus, jqXHR) => {
                        console.log(data);
                        alert("Success");
                        isPendingUpdateRequest = false;
                    },
                    error: (jqXHR, textStatus, errorThrown) => {
                        if (textStatus === "timeout") {
                            ShowServerErrorBox("Operation timed out");
                            return;
                        }
                        ShowServerErrorBox(`Response status: ${jqXHR.responseJSON.error}`);
                        isPendingUpdateRequest = false;
                    }
                });
            });
        });

        function GetClientInfo() {
            function FillClientInfo(data) {
                $("#@AccountTagID.InputClientNameID").val(data.name);
                $("#@AccountTagID.InputClientSurnameID").val(data.surname);
                $("#@AccountTagID.InputClientUsernameID").val(data.username);
                $("#@AccountTagID.InputClientEmailID").val(data.email);
            }
            $.ajax({
                method: "GET",
                url: "@ServerApiConfig.BaseUrl/api/client",
                headers: {
                    "@ServerApiConfig.TokenHeaderName": getCookie("@ClientTokenCookieDefaults.AuthCookieName")
                },
                success: (data, textStatus, jqXHR) => {
                    console.log(data);
                    FillClientInfo(data);
                },
                error: (jqXHR, textStatus, errorThrown) => {
                    if (textStatus === "timeout") {
                        alert("Operation timed out");
                        return;
                    }
                    alert(`Response status: ${jqXHR.responseJSON.error}`);
                }
            });
        }

        function IsClientUsernameValid() {
            var usernameRegexp = /^[a-zA-Z][a-zA-Z0-9]{5,30}$/;
            var usernameInput = $("#@AccountTagID.InputClientUsernameID");
            return usernameRegexp.test(usernameInput.val());
        }

        function ShowClientUsernameValidationError(error) {
            var usernameValidationError = $("#@AccountTagID.ClientUsernameValidationBoxID");
            var usernameInput = $("#@AccountTagID.InputClientUsernameID");
            usernameValidationError.removeClass("d-none");
            usernameValidationError.text(error);
            usernameInput.addClass("clientinfo-input-error");
        }

        function HideClientUsernameValidationError() {
            var usernameValidationError = $("#@AccountTagID.ClientUsernameValidationBoxID");
            var usernameInput = $("#@AccountTagID.InputClientUsernameID");
            usernameValidationError.addClass("d-none");
            usernameInput.removeClass("clientinfo-input-error");
        }

        function IsClientEmailValid() {
            var emailRegexp = /^[a-zA-Z]([a-zA-Z0-9]|[\.-_]){0,50}@@[a-z]{1,10}\.[a-z]{1,10}$/;
            var emailInput = $("#@AccountTagID.InputClientEmailID");
            return emailRegexp.test(emailInput.val());
        }

        function ShowClientEmailValidationError(error) {
            var emailValidationError = $("#@AccountTagID.ClientEmailValidationBoxID");
            var emailInput = $("#@AccountTagID.InputClientEmailID");
            emailValidationError.removeClass("d-none");
            emailValidationError.text(error);
            emailInput.addClass("clientinfo-input-error");
        }

        function HideClientEmailValidationError() {
            var emailValidationError = $("#@AccountTagID.ClientEmailValidationBoxID");
            var emailInput = $("#@AccountTagID.InputClientEmailID");
            emailValidationError.addClass("d-none");
            emailInput.removeClass("clientinfo-input-error");
        }

        function ShowServerErrorBox(error) {
            var serverError = $("#@AccountTagID.ServerErrorBoxID");
            serverError.removeClass("d-none");
            serverError.text(error);
        }

        function HideServerErrorBox() {
            var serverError = $("#@AccountTagID.ServerErrorBoxID");
            serverError.addClass("d-none");
        }

    </script>
}